#!/bin/bash

# space separated list
backup_vm_functions="/home/backuper/scripts/backup_vm/functions"
[ ! -f "$backup_vm_functions" ] && backup_vm_functions="/usr/lib/easy-backup/backup_vm/functions"

vmanager_functions="$(dirname $0)/functions"
[ ! -f "$vmanager_functions" ] && vmanager_functions="/usr/lib/easy-backup/vmanager/functions"

includes="$backup_vm_functions $vmanager_functions"

[ $# -lt 1 ] && { echo "Usage: $(basename $0) function_name [argv1 [argv2 ...]]"; exit 1; }

for file in $includes; do
	[ ! -f $file ] && { _log "include file '$file' not found"; exit 2;  }
	source $file
done

function vmInfo(){
	[ -z $cacheVmLocationFile ] && { _log "cacheVmLocationFile isn't set"; return 1; }
	# chache every X minute
	find $(dirname $cacheVmLocationFile) -name $(basename $cacheVmLocationFile) -type f \
		-newermt "$(date +"%Y-%m-%d %H:%M" -d '5 minute ago')" | \
		grep $(basename $cacheVmLocationFile) &>/dev/null || cacheVmLocation
	echo "name state autostart host vmMem hostFreeMem BackupDays lastBackup lastBackupStatus"
	local cnt=1
	while read line; do
		usleep 100000 # <=10 proc can work at same time (remote sshd MaxSession default)
		{ printVmInfo "$line" < /dev/null || _log "Can't get info about: $line"; } & 
	cnt=$(( cnt+1 ))
	done < $cacheVmLocationFile
	wait	
}

# $1 - vmName
function start(){
	checkArgCnt $FUNCNAME $# 1
	local vmName="$1"
	virshForVm "$vmName" "start $vmName" || return 1
	return 0
}

# Destroy VM
# $1 - vmName
function destroy(){
    checkArgCnt $FUNCNAME $# 1
    local vmName="$1"
    virshForVm "$vmName" "destroy $vmName" || return 1
    return 0
}

# Gracefully VM shutdown
# $1 - vmName
function shutdown(){
    checkArgCnt $FUNCNAME $# 1
    local vmName="$1"
    virshForVm "$vmName" "shutdown $vmName" || return 1
    return 0
}

# Hard Reset for VM
# $1 - vmName
function reset(){
    checkArgCnt $FUNCNAME $# 1
    local vmName="$1"
    virshForVm "$vmName" "reset $vmName" || return 1
    return 0
}

function autostartOn(){
    checkArgCnt $FUNCNAME $# 1
    local vmName="$1"
    virshForVm "$vmName" "autostart $vmName" || return 1
    return 0
}

function autostartOff(){
    checkArgCnt $FUNCNAME $# 1
    local vmName="$1"
    virshForVm "$vmName" "autostart --disable $vmName" || return 1
    return 0
}

# start on all host all vms which in autostart list
function autostartWatchDog(){
	local host=
	for host in ${HostServers[*]}; do
		autostartVmsForHost "$host" &
	done
	wait
}

# $1 - vmName
function backup(){
	checkArgCnt $FUNCNAME $# 1
	[ -f /var/log/backup_vm ] && DetailedLogFile="/var/log/backup_vm" || DetailedLogFile="~/backup_vm.log"
	backup_vm="/home/backuper/scripts/backup_vm/backup"
	[ ! -x $backup_vm ] && backup_vm="/usr/bin/backup_vm"
	[ ! -x $backup_vm ] && { _log "backup_vm/backup file not found"; return 1; }
	sudo -u backuper bash -c "$backup_vm $1 &>>$DetailedLogFile" &
}

function help(){
	grep -E "^function" ./vmanager | cut -d ' ' -f 2
}

func_name="$1"
shift 1

grep "function $func_name()" $0 &>/dev/null || { echo "Function '$func_name' not found"; exit 3; }

cd $(dirname $0)
loadConfig
$func_name $*
exit $? 
